name: array string passing test

on:
  workflow_dispatch:

jobs:
  caller:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: create array
        id: create_array
        run: |
          set -x
          array=(arg1 arg2 "arg 3" -o val1 --opt2 'v a l' --opt3="v a l" --opt4='v a l')
          # array=(arg1 arg2 "arg 3" -o val1 --opt2 'v a l' --opt3="v a l" --opt4='v a l' --opt5="val \" 'X")
          printf "%s\n" "${array[@]}"
          echo "ex0=hello world" | tee -a $GITHUB_OUTPUT #OK "ex0": "hello world",
          echo "ex1=arg1 arg2 \"arg 3\" -o val1 --opt2 'v a l' --opt3=\"v a l\" --opt4='v a l' --opt5=\"val \\\" '\"" | tee -a $GITHUB_OUTPUT

          # 要素を文字列展開するときにクオーテーションが消えてしまうので、空白入の要素がそこで切られてしまう
          # また、配列の中にクオートが入っているとエスケープできていないので失敗する
          echo "opt_str0=${array[*]}" | tee -a $GITHUB_OUTPUT
          echo "opt_str1=${array[@]}" | tee -a $GITHUB_OUTPUT

          # 下記の方法はgithub actionsでしか使えないので注意 shellscirptで同じことをする場合は若干違う(未検証)
          # ★ 解決方法
          # 参考
          # * https://stackoverflow.com/questions/12985178/bash-quoted-array-expansion
          # * https://lwn.net/Articles/701009/
          # 'Q': The expansion is a string that is the value of PARAMETER quoted in a format that can be reused as input. (bash 4.4~)
          # 各要素を hoge -> 'hoge' というふうに文字列としてクオートが付いた状態にして展開する。(要素にシングルクオートがあってもエスケープしてくれる)
          # このとき[*]での展開が正しい こっちは配列が一つの文字列になる
          echo "opt_str2=${array[*]@Q}" | tee -a $GITHUB_OUTPUT

          # よくないパターン
          # 結果としては同じだが、一般的に一つの文字列にするときに[@]で展開するのはよくない 結合としては opt_str2=a, b, c d, ...という風になっている (printf '%s\n'で出力するとわかる)
          echo "opt_str3=${array[@]@Q}" | tee -a $GITHUB_OUTPUT

          # 他の方法 ただ配列の中に'が入っているとエスケープできていないので失敗する
          # 直接各要素をクオートする ここは[@]となる
          echo "opt_str4=$(printf "'%s' " "${array[@]}")" | tee -a $GITHUB_OUTPUT

          # おまけ 結果は対応するものと同じ
          echo opt_str1a="${array[*]}" | tee -a $GITHUB_OUTPUT
          echo opt_str2a="${array[*]@Q}" | tee -a $GITHUB_OUTPUT
          echo opt_str4a="$(printf "'%s' " "${array[@]}")" | tee -a $GITHUB_OUTPUT

          # よくない これは\"が"になった状態でシェルが実行される("が相殺できたりする)
          echo "opt_str2b=\"${array[*]@Q}\"" | tee -a $GITHUB_OUTPUT
          echo "opt_str4b=\"$(printf "'%s' " "${array[@]}")\"" | tee -a $GITHUB_OUTPUT

      - name: check opt_str
        env:
          inspect: ${{ toJSON(steps.create_array.outputs) }}
        run: |
          echo "$inspect"

      - name: call actions ex0
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.ex0 }}

      - name: call actions ex1
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.ex1 }}

      - name: call actions str0
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.opt_str0 }}

      - name: call actions str1
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.opt_str1 }}

      - name: call actions str2
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.opt_str2 }}

      - name: call actions str3
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.opt_str3 }}

      - name: call actions str4
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.opt_str4 }}

      - name: call actions str2b
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.opt_str2b }}

      - name: call actions str4b
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: ${{ steps.create_array.outputs.opt_str4b }}


      - name: call actions manually pattern1
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: arg1 arg2 "arg 3" -o val1 --opt2 'v a l' --opt3="v a l" --opt4='v a l' --opt5="val \" '"

      # 文字列を''で囲みたいなら({{}}記法のときは必須)、'は''でエスケープする
      - name: call actions manually pattern2
        continue-on-error: true
        uses: ./.github/actions/tmp2
        with:
          opt_str: 'arg1 arg2 "arg 3" -o val1 --opt2 ''v a l'' --opt3="v a l" --opt4=''v a l'' --opt5="val \" ''"'